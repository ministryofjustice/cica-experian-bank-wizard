# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.0.0
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: cica-experian
    docker:
      # Image tool container
      - image: ministryofjustice/cloud-platform-tools
jobs:
  build-for-test:
    docker:
      - image: 'node:22.8.0-bookworm-slim'
    steps:
      - checkout
      - run:
          name: npm audit
          command: npm audit --production --audit-level=moderate
      - persist_to_workspace:
          root: ./
          paths:
          - '*'
      - restore_cache:
          key: v1-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm dependencies
          command: 'if [ -d node_modules ]; then echo package.json and package-lock.json unchanged. Using node_modules cache.; else npm ci --loglevel warn --yes; fi'
      - save_cache:
          key: v1-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
            - ./openapi
  test:
    docker:
      - image: 'node:22.8.0-bookworm-slim'
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: v1-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Run tests and code coverage
          command: npx --no-install jest --ci --runInBand --bail --silent --coverage --projects jest.config.js
  lint:
    docker:
      - image: 'node:22.8.0-bookworm-slim'
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          key: v1-npm-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Lint codebase
          command: npx --no-install eslint .
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install packages
          command: apk add --update-cache --upgrade curl unzip
      - aws-cli/setup:
          role_arn: $S3_ROLE_TO_ASSUME # this will use the env var
          region: $ECR_REGION # this will use the env var
          profile_name: s3-profile
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME # this will use the env var
          profile_name: ecr-profile
      - run:
          name: Download required files from S3
          command: |
            aws s3 cp s3://${BANKWIZARD_ARTIFACT_BUCKET_NAME}/ . --recursive --region ${ECR_REGION} --profile s3-profile
      - run: &ecr_login
          name: Login to ecr
          command: |
            aws ecr get-login-password --region ${ECR_REGION} --profile ecr-profile | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env
      - run:
          name: Build docker image
          command: |
            docker build --no-cache -t cica/cica-experian .
      - run:
          name: Archive Docker Image
          command: |
            docker save -o image.tar cica/cica-experian:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish_latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Test the container
          command: |
            docker run -d -p 3001:3001 --restart=always --name cica-experian cica/cica-experian:latest
            docker ps
            docker stop cica-experian
            docker ps
  push_image:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run:
          name: Authenticate and push image to ecr
          command: |
            echo "run aws"
            aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin  ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
            docker tag cica/cica-experian:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1}
            docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1}
  deploy_to_dev:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./live_ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_DEV}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=cica-experian-dev
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl config current-context
            kubectl --namespace=cica-experian-dev get pods
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Dev/deploy.yaml experian-bankwizard-service=${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Dev/service.yaml \
                -f kube_deploy/Dev/ingress.yml
  deploy_to_uat:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./live_ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_UAT}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=cica-experian-uat
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl config current-context
            kubectl --namespace=cica-experian-uat get pods
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Uat/deploy.yaml experian-bankwizard-service=${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Uat/service.yaml \
  deploy_to_prod:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./live_ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_PROD}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=cica-experian-prod
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl config current-context
            kubectl --namespace=cica-experian-prod get pods
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Prod/deploy.yaml experian-bankwizard-service=${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Prod/service.yaml \
  deploy_to_staging:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./live_ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./live_ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_STAG}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=cica-experian-stag
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl config current-context
            kubectl --namespace=cica-experian-stag get pods
      - deploy:
          name: Deploy to the cluster
          command: |
            echo "deploy before aws ecr"
            kubectl set image -f kube_deploy/Stag/deploy.yaml experian-bankwizard-service=${ECR_REGISTRY}/${ECR_REPOSITORY}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
                -f kube_deploy/Stag/service.yaml \
workflows:
  version: 2
  build-test-push-deploytouatapproval-deployuat-deploytoprodapproval-deployprod:
    jobs:
      - build-for-test
      - test:
          requires:
            - build-for-test
      - lint:
          requires:
            - build-for-test
      - build:
          requires:
            - test
            - lint
      - publish_latest:
          requires:
            - build
      - push_image:
          requires:
            - publish_latest
          filters:
            branches:
              only:
                - experian-bankwizard-deploy
                - experian-bankwizard-deploy-to-staging
      - deploy_to_dev_approval:
          type: approval
          requires:
            - push_image
      - deploy_to_dev:
          requires:
            - deploy_to_dev_approval
          filters:
            branches:
              only:
                - experian-bankwizard-deploy
      - deploy_to_uat_approval:
          type: approval
          requires:
            - deploy_to_dev
      - deploy_to_uat:
          requires:
            - deploy_to_uat_approval
          filters:
            branches:
              only:
                - experian-bankwizard-deploy
      - deploy_to_staging_approval:
          type: approval
          requires:
            - push_image
          filters:
            branches:
              only:
                - experian-bankwizard-deploy-to-staging
      - deploy_to_staging:
          requires:
            - deploy_to_staging_approval
          filters:
            branches:
              only:
                - experian-bankwizard-deploy-to-staging
      - deploy_to_prod_approval:
          type: approval
          requires:
            - deploy_to_uat
      - deploy_to_prod:
          requires:
            - deploy_to_prod_approval
          filters:
            branches:
              only: experian-bankwizard-deploy
